import java.sql.*;
import java.util.Scanner;

public class OracleCRUD {

    // Oracle Database connection details
    static final String DB_URL = "jdbc:oracle:thin:@localhost:1521:xe"; // Replace xe with your SID if different
    static final String USER = "yourUsername";
    static final String PASS = "yourPassword";

    public static void main(String[] args) {
        Connection conn = null;
        Scanner scanner = new Scanner(System.in);

        try {
            // Connect to Oracle Database
            conn = DriverManager.getConnection(DB_URL, USER, PASS);
            System.out.println("Connected to Oracle database successfully.");

            // Create Books table
            String createTableSQL = "CREATE TABLE Books (" +
                                    "BookID NUMBER GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY, " +
                                    "Title VARCHAR2(100), " +
                                    "Author VARCHAR2(100), " +
                                    "Price NUMBER)";
            Statement stmt = conn.createStatement();
            stmt.execute(createTableSQL);
            System.out.println("Books table created successfully.");

            int choice;
            do {
                System.out.println("\nChoose an operation:");
                System.out.println("1. Insert");
                System.out.println("2. Update");
                System.out.println("3. Delete");
                System.out.println("4. Display All");
                System.out.println("5. Exit");
                choice = scanner.nextInt();
                scanner.nextLine(); // Consume newline

                switch (choice) {
                    case 1:
                        // Insert Operation
                        System.out.print("Enter Title: ");
                        String title = scanner.nextLine();
                        System.out.print("Enter Author: ");
                        String author = scanner.nextLine();
                        System.out.print("Enter Price: ");
                        double price = scanner.nextDouble();

                        String insertSQL = "INSERT INTO Books (Title, Author, Price) VALUES (?, ?, ?)";
                        PreparedStatement insertStmt = conn.prepareStatement(insertSQL);
                        insertStmt.setString(1, title);
                        insertStmt.setString(2, author);
                        insertStmt.setDouble(3, price);
                        insertStmt.executeUpdate();
                        System.out.println("Record inserted successfully.");
                        break;

                    case 2:
                        // Update Operation
                        System.out.print("Enter BookID to update: ");
                        int updateId = scanner.nextInt();
                        scanner.nextLine();
                        System.out.print("Enter new Price: ");
                        double newPrice = scanner.nextDouble();

                        String updateSQL = "UPDATE Books SET Price = ? WHERE BookID = ?";
                        PreparedStatement updateStmt = conn.prepareStatement(updateSQL);
                        updateStmt.setDouble(1, newPrice);
                        updateStmt.setInt(2, updateId);
                        int rowsUpdated = updateStmt.executeUpdate();
                        if (rowsUpdated > 0) {
                            System.out.println("Record updated successfully.");
                        } else {
                            System.out.println("No record found with BookID " + updateId);
                        }
                        break;

                    case 3:
                        // Delete Operation
                        System.out.print("Enter BookID to delete: ");
                        int deleteId = scanner.nextInt();

                        String deleteSQL = "DELETE FROM Books WHERE BookID = ?";
                        PreparedStatement deleteStmt = conn.prepareStatement(deleteSQL);
                        deleteStmt.setInt(1, deleteId);
                        int rowsDeleted = deleteStmt.executeUpdate();
                        if (rowsDeleted > 0) {
                            System.out.println("Record deleted successfully.");
                        } else {
                            System.out.println("No record found with BookID " + deleteId);
                        }
                        break;

                    case 4:
                        // Display All Records
                        String selectSQL = "SELECT * FROM Books";
                        Statement selectStmt = conn.createStatement();
                        ResultSet rs = selectStmt.executeQuery(selectSQL);
                        System.out.println("Books Table:");
                        while (rs.next()) {
                            System.out.println("BookID: " + rs.getInt("BookID") + ", Title: " + rs.getString("Title") +
                                               ", Author: " + rs.getString("Author") + ", Price: " + rs.getDouble("Price"));
                        }
                        rs.close();
                        break;

                    case 5:
                        System.out.println("Exiting program.");
                        break;

                    default:
                        System.out.println("Invalid choice. Please select again.");
                }
            } while (choice != 5);

        } catch (SQLException e) {
            e.printStackTrace();
        } finally {
            // Close resources
            try {
                if (conn != null) conn.close();
                scanner.close();
            } catch (SQLException ex) {
                ex.printStackTrace();
            }
        }
    }
}
